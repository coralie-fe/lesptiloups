<?php
/**
 * Created by PhpStorm.
 * User: POE 2
 * Date: 09/11/2016
 * Time: 12:42
 */

//hook de test affichant un message lorsque que le cron est lancé
function recrutement_cron()
{
    return drupal_set_message("Le cron a été lance", "status");
}


//hook qui configure le mail d'envoi lorsque le formulaire
function recrutement_mail($key, &$message, $param)
{
    $options = array(
        'langcode' => $message['langcode'],//La langue du courriel
    );

    //Selon cas où la clé est renseigné, on formalise le courriel
    switch ($key) {
        case 'node_insert':
            $message['from'] = \Drupal::config('system.site')->get('mail');//Le mail de l'expéditeur
            $message['subject'] = t('Le sujet du mail ici: @title', array('@title' => $param['title']), $options);//L'objet du courriel
            $message['body'][] = \Drupal\Component\Utility\Html::escape($param['message']);//Le corps du courriel
            $message['path']=\Drupal::service('path.validator');//Le path pour valider le courriel
            break;
    }

//fonction qui envoi le chemin valide dans le courriel
function recrutement_validate_path($element, \Drupal\Core\Form\FormState $form_state)
    {
        $path = $element['#value'];
        if (!empty($path)) {
            if (!(\Drupal::service('path.validator')->isValid($path))) {
                $form_state->setError($element, t('Veuillez indiquer un chemin de redirection valide.'));
            }
        }
    }
}

function recrutement_entity_type_alter(array &$entity_types) {
    $a = 1;
}
function recrutement_entity_type_build(array &$entity_types) {
    $a = 1;
}


function recrutement_entity_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state)
{

    if ($operation == 'edit' && $entity->getEntityTypeId() == 'node' && $entity->bundle() == 'evenement') {

        /* kint($form_state);
        kint($operation);
        kint($this);*/
        $date = time();

        $dateeventField = $entity->get('field_date_de_l_evenement');
        $dateevent = $dateeventField->getValue();
        $dateevent = $dateevent[0]['value'];
//$dateevent = $entity->get('field_date_de_l_evenement')->getValue()[0]['value'];
        /* kint(strtotime('2016-11-21T14:00:00'));
        kint(strtotime('2016-11-21T14:09:35'));
        kint($dateeventField);
        kint($dateevent);*/
        $rec = $form_state->getBuildInfo();
        $rec['callback_object']= $rec['callback_object']->setOperation('node.evenement.evenement_passe');
        $form_state->setBuildInfo($rec);
        kint($form_state->getBuildInfo());
        if ($date < $dateevent) {
            $rec = $form_state->getBuildInfo();
            $rec['callback_object']= $this->setOperation('node.evenement.evenement_passe');
            $form_state->setBuildInfo($rec);
            kint($form_state->getBuildInfo());
        }
    }
}

function recrutement_entity_form_display_alter(\Drupal\Core\Entity\Display\EntityFormDisplayInterface &$form_display, array $context){
// kint($form_display);
// kint($context);
// $form_display->setOriginalId('node.evenement_passe');
// $form_display->set('id','node.evenement_passe');
//if($context['callback_object']->getOperation() == 'evenement_passe') {
// $context['form_mode'] = 'node.evenement_passe';
// kint($form_display);
// kint($context);
    $storage = \Drupal::entityManager()->getStorage('entity_form_display');
    $a = $storage->load('node.evenement.evenement_passe');
//$form_display = $a;
// kint($a);
//}
}